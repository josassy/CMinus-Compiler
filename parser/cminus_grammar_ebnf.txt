program -> declaration-list
declaration-list -> declaration { declaration }
declaration -> var-declaration | fun-declaration
var-declaration -> type-specifier ID [[ NUM ]] ;
type-specifier -> int | void
fun-declaration -> type-specifier ID ( params ) compound-stmt
params -> param-list | void
param-list -> param { , param }
param -> type-specifier ID [[ ]]
compound-stmt -> { local-declarations statement-list } 
local-declarations -> local-declarations var-declaration | empty
statement-list -> statement { statement } | empty
statement -> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt -> [ expression ] ;
selection-stmt -> if ( expression ) statement [ else statement ]
iteration-stmt -> while ( expression ) statement
return-stmt -> return [ expression ] ;
expression -> var = expression | simple-expression
var -> ID [[ expression ]]
simple-expression -> additive-expression [ relop additive-expression ]
relop -> <= | < | > | >= | == | !=
additive-expression -> term [ addop term ]
addop -> + | -
term -> factor [ mulop factor ]
mulop -> * | /
factor -> ( expression ) | var | call | NUM
call -> ID ( args )
args -> arg-list | empty
arg-list -> expression [ , expression ]